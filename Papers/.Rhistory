which(fish==1)
##### Heatmapping
colnames(prior) <- paste("X", 1:20, sep = "")
rownames(prior) <- paste("Y", 1:20, sep = "")
PRIOR <- melt(prior)
PRIOR <- cbind(PRIOR, melt(fish)[,3])
colnames(PRIOR) <- c("Y", "X", "Pr", "Location")
ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[,4], aes(x = X, y = Y))+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))
ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[PRIOR$Location,], aes(x = X, y = Y))+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))
ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[PRIOR$Location==1,], aes(x = X, y = Y))+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))
set.seed(2021)
prior <- generate_lost(20,400)
fish <- generate_fisherman(20)
which(fish==1)
##### Heatmapping
colnames(prior) <- paste("X", 1:20, sep = "")
rownames(prior) <- paste("Y", 1:20, sep = "")
PRIOR <- melt(prior)
PRIOR <- data.frame(cbind(PRIOR, melt(fish)[,3]))
colnames(PRIOR) <- c("Y", "X", "Pr", "Location")
ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[PRIOR$Location==1,], aes(x = X, y = Y))+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))
prior <- generate_lost(20,400)
fish <- generate_fisherman(20)
PRIOR <- melt(prior)
PRIOR <- data.frame(cbind(PRIOR, melt(fish)[,3]))
colnames(PRIOR) <- c("Y", "X", "Pr", "Location")
ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[PRIOR$Location==1,], aes(x = X, y = Y))+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))
##### Heatmapping
colnames(prior) <- paste("X", 1:20, sep = "")
rownames(prior) <- paste("Y", 1:20, sep = "")
PRIOR <- melt(prior)
PRIOR <- data.frame(cbind(PRIOR, melt(fish)[,3]))
colnames(PRIOR) <- c("Y", "X", "Pr", "Location")
ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[PRIOR$Location==1,], aes(x = X, y = Y))+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))
set.seed(2021)
prior <- generate_lost(20,400)
fish <- generate_fisherman(20)
##### Heatmapping
colnames(prior) <- paste("X", 1:20, sep = "")
rownames(prior) <- paste("Y", 1:20, sep = "")
PRIOR <- melt(prior)
PRIOR <- data.frame(cbind(PRIOR, melt(fish)[,3]))
colnames(PRIOR) <- c("Y", "X", "Pr", "Location")
ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[PRIOR$Location==1,], aes(x = X, y = Y))+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))
##### Heatmapping
colnames(prior) <- paste("X", 1:20, sep = "")
rownames(prior) <- paste("Y", 1:20, sep = "")
PRIOR <- melt(prior)
PRIOR <- data.frame(cbind(PRIOR, melt(fish)[,3]))
colnames(PRIOR) <- c("Y", "X", "Pr", "Location")
ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[PRIOR$Location==1,], aes(x = X, y = Y))+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))+
scale_colour_manual(name = 'Fisherman Location', values = 'black')
ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[PRIOR$Location==1,], aes(x = X, y = Y))+
scale_colour_manual(name = 'Fisherman Location', values = 'black')+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))
ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[PRIOR$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black')+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))
ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[PRIOR$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black', "Something")+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))
search_size <- 20
detect_pr   <- 0.75
set.seed(2021)
prior <- generate_lost(20,400)
fish <- generate_fisherman(20)
##### Heatmapping
colnames(prior) <- paste("X", 1:20, sep = "")
rownames(prior) <- paste("Y", 1:20, sep = "")
PRIOR <- melt(prior)
PRIOR <- data.frame(cbind(PRIOR, melt(fish)[,3]))
colnames(PRIOR) <- c("Y", "X", "Pr", "Location")
ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[PRIOR$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black', "Something")+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))
#######
Found = F
Zed <- F
post <- NULL
maincell_prior <- 0
maincell_post <- 0
########
for (i in 1:48){
cell <- min(which(prior == max(prior)))
Z <- rbernoulli(1, fish[cell]*detect_pr)
Zed[i] <- Z
maincell_prior[i] <- prior[which(fish == 1)]
if (Z == F){
Z = 0
prior[cell] <- ((1-detect_pr)*prior[cell])/(1-detect_pr*prior[cell])
prior[-cell] <- prior[-cell]/(1-detect_pr*prior[-cell])
Found[i] = F
post[[i]] <- prior
}
if (Z == T & fish[cell] == 1){
Found[i] = T
break
}
maincell_post[i] <- prior[which(fish == 1)]
}
Found
cell
Zed
maincell_prior
maincell_post
plot(maincell_post, xlab="Search Iteration",ylab = "Posterior Probability", main="", pch = 1)
##### Heatmapping
Heat <- NULL
for (i in 1:length(post)){
colnames(post[[i]]) <- paste("X", 1:20)
rownames(post[[i]]) <- paste("Y", 1:20)
POST1 <- melt(post[[i]])
PPOST1 <- data.frame(cbind(POST1, melt(fish)[,3]))
colnames(POST1) <- c("Y", "X", "Pr", "Location")
Heat[[i]] <- (ggplot(POST1, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = POST1[POST1$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black', "Something")+
scale_y_discrete(limits=rev)+
labs(title = paste("Search", i)))
}
for (i in 1:length(post)){
colnames(post[[i]]) <- paste("X", 1:20)
rownames(post[[i]]) <- paste("Y", 1:20)
POST1 <- melt(post[[i]])
POST1 <- data.frame(cbind(POST1, melt(fish)[,3]))
colnames(POST1) <- c("Y", "X", "Pr", "Location")
Heat[[i]] <- (ggplot(POST1, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = POST1[POST1$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black', "Something")+
scale_y_discrete(limits=rev)+
labs(title = paste("Search", i)))
}
Heat
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
generate_lost <- function(grid_size, nsims){
# Function to generate the prior distribution for the
# location of the lost fisherman
# Args:
#       grid_size: the dimensions of the square search grid
#       nsims: number of samples to base the prior distribution on
mu_vec  <- c(grid_size/2, grid_size/2)
sig_mat <- matrix(c(2, 1, 5, 5), 2,2)
dat <- mvrnorm(nsims, mu_vec, sig_mat)
dat <- round(abs(dat))
prior <- matrix(rep(0,grid_size^2), grid_size, grid_size)
for (i in 1:NROW(dat)){
if (dat[i,1] < grid_size & dat[i,2] < grid_size){
prior[dat[i,1], dat[i,2]] <- prior[dat[i,1], dat[i,2]] + 1
}
}
prior <- prior/sum(prior)
return(prior)
}
generate_fisherman <- function(grid_size){
# Function to generate the true location of the lost fisherman.
# This should not effect the search decision in any way!!
# Args:
#       grid_size: the dimensions of the square search grid
mu_vec  <- c(grid_size/2, grid_size/2)
sig_mat <- matrix(c(2, 1, 5, 5), 2,2)
location  <- round(mvrnorm(1, mu_vec, sig_mat))
true_grid <- matrix(rep(0, grid_size^2), grid_size, grid_size)
true_grid[location[1], location[2]] <- 1
return(true_grid)
}
search_size <- 20
detect_pr   <- 0.75
prior <- generate_lost(20,400)
fish <- generate_fisherman(20)
####### Initialization of variables
Found = F
Zed <- F
post <- NULL
maincell_prior <- 0
maincell_post <- 0
######## Search Procedure
for (i in 1:48){
####How the search cell is selected (min function is used as some cells have equal probabilities)
search_cell <- min(which(prior == max(prior)))
Z <- rbernoulli(1, fish[search_cell]*detect_pr)
###Vector of all the Z outcomes for each search
Zed[i] <- Z
maincell_prior[i] <- prior[which(fish == 1)]
if (Z == F){
Z = 0
#### Updating probabilities
prior[search_cell] <- ((1-detect_pr)*prior[search_cell])/(1-detect_pr*prior[search_cell])
prior[-search_cell] <- prior[-search_cell]/(1-detect_pr*prior[-search_cell])
Found[i] = F
####The list of each search grid
post[[i]] <- prior
}
if (Z == T & fish[search_cell] == 1){
Found[i] = T
break
}
#Tracks post prob of cell with fisherman
maincell_post[i] <- prior[which(fish == 1)]
}
####The post prob of the cell with the fisherman
plot(maincell_post, xlab="Search Iteration", ylab = "Posterior Probability", main="", pch = 1)
##### Heatmapping
colnames(prior) <- paste("X", 1:20, sep = "")
rownames(prior) <- paste("Y", 1:20, sep = "")
PRIOR <- melt(prior)
PRIOR <- data.frame(cbind(PRIOR, melt(fish)[,3]))
colnames(PRIOR) <- c("Y", "X", "Pr", "Location")
prior_map <- ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[PRIOR$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black', "Something")+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))
Heat <- NULL
for (i in 1:length(post)){
colnames(post[[i]]) <- paste("X", 1:20)
rownames(post[[i]]) <- paste("Y", 1:20)
POST1 <- melt(post[[i]])
POST1 <- data.frame(cbind(POST1, melt(fish)[,3]))
colnames(POST1) <- c("Y", "X", "Pr", "Location")
Heat[[i]] <- (ggplot(POST1, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = POST1[POST1$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black', "Something")+
scale_y_discrete(limits=rev)+
labs(title = paste("Search", i)))
}
plot_grid(prior_map, Heat[[1]], Heat[[4]], Heat[[8]])
library(cowplot)
plot_grid(prior_map, Heat[[1]], Heat[[4]], Heat[[8]])
Heat[[i]] <- (ggplot(POST1, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = POST1[POST1$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black', "Something")+
scale_y_discrete(limits=rev)+
labs(title = paste("Search", i))+
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()))
for (i in 1:length(post)){
colnames(post[[i]]) <- paste("X", 1:20)
rownames(post[[i]]) <- paste("Y", 1:20)
POST1 <- melt(post[[i]])
POST1 <- data.frame(cbind(POST1, melt(fish)[,3]))
colnames(POST1) <- c("Y", "X", "Pr", "Location")
Heat[[i]] <- (ggplot(POST1, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = POST1[POST1$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black', "Something")+
scale_y_discrete(limits=rev)+
labs(title = paste("Search", i))+
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()))
}
plot_grid(prior_map, Heat[[1]], Heat[[4]], Heat[[8]])
for (i in 1:length(post)){
colnames(post[[i]]) <- paste("X", 1:20)
rownames(post[[i]]) <- paste("Y", 1:20)
POST1 <- melt(post[[i]])
POST1 <- data.frame(cbind(POST1, melt(fish)[,3]))
colnames(POST1) <- c("Y", "X", "Pr", "Location")
Heat[[i]] <- (ggplot(POST1, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = POST1[POST1$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black', "Something")+
scale_y_discrete(limits=rev)+
labs(title = paste("Search", i))+
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
))
}
plot_grid(prior_map, Heat[[1]], Heat[[4]], Heat[[8]])
prior_map <- ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[PRIOR$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black', "Something")+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))+
theme(axis.text.x=element_blank(),
axis.text.y=element_blank())
Heat <- NULL
for (i in 1:length(post)){
colnames(post[[i]]) <- paste("X", 1:20)
rownames(post[[i]]) <- paste("Y", 1:20)
POST1 <- melt(post[[i]])
POST1 <- data.frame(cbind(POST1, melt(fish)[,3]))
colnames(POST1) <- c("Y", "X", "Pr", "Location")
Heat[[i]] <- (ggplot(POST1, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = POST1[POST1$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black', "Something")+
scale_y_discrete(limits=rev)+
labs(title = paste("Search", i))+
theme(axis.text.x=element_blank(),
axis.text.y=element_blank()))
}
plot_grid(prior_map, Heat[[1]], Heat[[4]], Heat[[8]])
plot_grid(prior_map, Heat[[1]], Heat[[4]], Heat[[8]], Heat[[12]], Heat[[16]], Heat[[17]])
Heat[[i]] <- (ggplot(POST1, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = POST1[POST1$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black', "Something")+
scale_y_discrete(limits=rev)+
labs(title = paste("Search", i))+
theme(axis.text.x=element_blank(),
axis.text.y=element_blank()))
generate_lost <- function(grid_size, nsims){
# Function to generate the prior distribution for the
# location of the lost fisherman
# Args:
#       grid_size: the dimensions of the square search grid
#       nsims: number of samples to base the prior distribution on
mu_vec  <- c(grid_size/2, grid_size/2)
sig_mat <- matrix(c(2, 1, 5, 5), 2,2)
dat <- mvrnorm(nsims, mu_vec, sig_mat)
dat <- round(abs(dat))
prior <- matrix(rep(0,grid_size^2), grid_size, grid_size)
for (i in 1:NROW(dat)){
if (dat[i,1] < grid_size & dat[i,2] < grid_size){
prior[dat[i,1], dat[i,2]] <- prior[dat[i,1], dat[i,2]] + 1
}
}
prior <- prior/sum(prior)
return(prior)
}
generate_fisherman <- function(grid_size){
# Function to generate the true location of the lost fisherman.
# This should not effect the search decision in any way!!
# Args:
#       grid_size: the dimensions of the square search grid
mu_vec  <- c(grid_size/2, grid_size/2)
sig_mat <- matrix(c(2, 1, 5, 5), 2,2)
location  <- round(mvrnorm(1, mu_vec, sig_mat))
true_grid <- matrix(rep(0, grid_size^2), grid_size, grid_size)
true_grid[location[1], location[2]] <- 1
return(true_grid)
}
search_size <- 20
detect_pr   <- 0.75
prior <- generate_lost(20,400)
fish <- generate_fisherman(20)
####### Initialization of variables
Found = F
Zed <- F
post <- NULL
maincell_prior <- 0
maincell_post <- 0
######## Search Procedure
for (i in 1:48){
####How the search cell is selected (min function is used as some cells have equal probabilities)
search_cell <- min(which(prior == max(prior)))
Z <- rbernoulli(1, fish[search_cell]*detect_pr)
###Vector of all the Z outcomes for each search
Zed[i] <- Z
maincell_prior[i] <- prior[which(fish == 1)]
if (Z == F){
Z = 0
#### Updating probabilities
prior[search_cell] <- ((1-detect_pr)*prior[search_cell])/(1-detect_pr*prior[search_cell])
prior[-search_cell] <- prior[-search_cell]/(1-detect_pr*prior[-search_cell])
Found[i] = F
####The list of each search grid
post[[i]] <- prior
}
if (Z == T & fish[search_cell] == 1){
Found[i] = T
break
}
#Tracks post prob of cell with fisherman
maincell_post[i] <- prior[which(fish == 1)]
}
####The post prob of the cell with the fisherman
plot(maincell_post, xlab="Search Iteration", ylab = "Posterior Probability", main="", pch = 1)
set.seed(2021)
generate_lost <- function(grid_size, nsims){
# Function to generate the prior distribution for the
# location of the lost fisherman
# Args:
#       grid_size: the dimensions of the square search grid
#       nsims: number of samples to base the prior distribution on
mu_vec  <- c(grid_size/2, grid_size/2)
sig_mat <- matrix(c(2, 1, 5, 5), 2,2)
dat <- mvrnorm(nsims, mu_vec, sig_mat)
dat <- round(abs(dat))
prior <- matrix(rep(0,grid_size^2), grid_size, grid_size)
for (i in 1:NROW(dat)){
if (dat[i,1] < grid_size & dat[i,2] < grid_size){
prior[dat[i,1], dat[i,2]] <- prior[dat[i,1], dat[i,2]] + 1
}
}
prior <- prior/sum(prior)
return(prior)
}
search_size <- 20
detect_pr   <- 0.75
prior <- generate_lost(20,400)
fish <- generate_fisherman(20)
####### Initialization of variables
Found = F
Zed <- F
post <- NULL
maincell_prior <- 0
maincell_post <- 0
######## Search Procedure
for (i in 1:48){
####How the search cell is selected (min function is used as some cells have equal probabilities)
search_cell <- min(which(prior == max(prior)))
Z <- rbernoulli(1, fish[search_cell]*detect_pr)
###Vector of all the Z outcomes for each search
Zed[i] <- Z
maincell_prior[i] <- prior[which(fish == 1)]
if (Z == F){
Z = 0
#### Updating probabilities
prior[search_cell] <- ((1-detect_pr)*prior[search_cell])/(1-detect_pr*prior[search_cell])
prior[-search_cell] <- prior[-search_cell]/(1-detect_pr*prior[-search_cell])
Found[i] = F
####The list of each search grid
post[[i]] <- prior
}
if (Z == T & fish[search_cell] == 1){
Found[i] = T
break
}
#Tracks post prob of cell with fisherman
maincell_post[i] <- prior[which(fish == 1)]
}
####The post prob of the cell with the fisherman
plot(maincell_post, xlab="Search Iteration", ylab = "Posterior Probability", main="", pch = 1)
##### Heatmapping
colnames(prior) <- paste("X", 1:20, sep = "")
rownames(prior) <- paste("Y", 1:20, sep = "")
PRIOR <- melt(prior)
PRIOR <- data.frame(cbind(PRIOR, melt(fish)[,3]))
colnames(PRIOR) <- c("Y", "X", "Pr", "Location")
prior_map <- ggplot(PRIOR, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = PRIOR[PRIOR$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black', "Something")+
scale_y_discrete(limits=rev)+
labs(title = paste("Prior"))+
theme(axis.text.x=element_blank(),
axis.text.y=element_blank())
Heat <- NULL
for (i in 1:length(post)){
colnames(post[[i]]) <- paste("X", 1:20)
rownames(post[[i]]) <- paste("Y", 1:20)
POST1 <- melt(post[[i]])
POST1 <- data.frame(cbind(POST1, melt(fish)[,3]))
colnames(POST1) <- c("Y", "X", "Pr", "Location")
Heat[[i]] <- (ggplot(POST1, aes(X, Y, fill = Pr)) +
geom_tile()+
geom_point(data = POST1[POST1$Location==1,], aes(x = X, y = Y))+
scale_colour_manual('Location', values = 'black', "Something")+
scale_y_discrete(limits=rev)+
labs(title = paste("Search", i))+
theme(axis.text.x=element_blank(),
axis.text.y=element_blank()))
}
plot_grid(prior_map, Heat[[1]], Heat[[4]], Heat[[8]], Heat[[12]], Heat[[16]], Heat[[17]])
?plot_grid
plot_grid(prior_map, Heat[[1]], Heat[[4]], Heat[[8]], Heat[[12]], Heat[[17]], nrow = 3, ncol=2)
setwd("C:/Users/dylan/Documents/Dylan/Work/Honours 2023/Project - Fish/Stats-Honours-Project/Papers")
